lib = require('./index');
configure = lib.config;
dateUtil = lib.getDateUtil();
fs = require('fs');
ejs = require('ejs');
ejs.filters.day = function(obj, type) {
  if (type === undefined) {
      type = 'second';
  }
  if (type === 'second') {
    obj =  new Date(parseInt(obj, 10 ) * 1000).pattern('yyyyMMdd');
  }
  return obj;
};
ejs.filters.time = function(obj, type) {
  if (type === undefined) {
      type = 'second';
  }
  if (type === 'second') {
    obj =  new Date(parseInt(obj, 10 ) * 1000).pattern('yyyy-MM-dd hh:mm:ss');
  }
  return obj;
};
ejs.filters.url = function(obj, webSite, all) {
  if (all === undefined) {
      all = true;
  }
  obj = '/' + obj;
  if (all) {
    obj = webSite  + obj;
  }
  return obj;
};
controllerPath = lib.config.controllerPath;
modelPath = lib.config.modelPath;
viewPath = lib.config.viewPath;
models = [];
controllers = [];
views = [];
exports.getController = function (c) {
  var controller = controllers[c];
  if (controller) {
    return controller;
  }
  if (fs.existsSync(controllerPath + '/' + c + '.js')) {
    controllers[c] = controller = require(controllerPath + '/' + c)(lib);
    return controller;
  }
  return false;
};
exports.getModel = function (m) {
  var model = models[m];
  if (model) {
    return model;
  }
  if (fs.existsSync(modelPath + '/' + m + '.js')) {
    models[m] = model = require(modelPath + '/' + m)(lib);
    return model;
  }
  return false;
};
exports.getView = function (v) {
  var view = {
    data: {},
    assign: function(k, v) {
      this.data[k] = v;
    },
    display: function(filePath) {
      var path = viewPath + '/' + filePath;
      this.data['filename'] =  path;
      try {
        var str = fs.readFileSync(path, 'utf8');
        return ejs.render(str, this.data);
      } catch (e) {
        return e.toString();
      }
    },
  };
  return view;
};
